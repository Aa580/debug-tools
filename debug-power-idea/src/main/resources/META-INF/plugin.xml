<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>io.github.future0923.DebugPower</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>DebugPower</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="future94@qq.com" url="https://github.com/future0923">future0923</vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description><![CDATA[
    Quickly call Java methods:
    <br>
    Quick Debugging <a href="https://github.com/future0923/debug-power">github</a> | <a href="https://gitee.com/future94/debug-power">gitee</a>
    <ul>
        <li>First, you need to start the service, and then right-click on Quick Debug in the method you want to debug and run</li>
        <li>You will see the following interface. It will automatically provide the current started service, current class, current method, and generate the JSON entity object to be requested based on method parameters</li>
        <li>Select the service you want to debug, and then click the attach button (if you want to refresh the list, you can also click the other two to clear the cache). When you run the project, it will start attach to the currently started service</li>
        <li>If you want to log in to authentication and other functions, you can specify the Authorization Header, which will mock a request and add this request header to the RequestContextHolder in Spring, so that you can obtain it later</li>
        <li>If you want to modify it, you can modify the corresponding parameters</li>
    </ul>
    <strong>Execute Last</strong>
    The above operation will initiate a request for the current method. If you no longer use the current method and want to execute the last request, click Execute Last to execute the last request.
  ]]></description>

    <change-notes>
        <![CDATA[
        <strong>1.2.0</strong>
        <ul>
            <li>Fix the problem that the class library failed to load under the window.</li>
            <li>Optimized the core package loading method.</li>
            <li>Increase the time required to print execute SQL statements and SQL.(mysql、postgresql、sqlserver、clickhouse、oracle)</li>
        </ul>
        <strong>1.1.1</strong>
        <ul>
            <li>Fix java class contains collection properties when generating json throw StackOverflowError.</li>
            <li>Custom class loader isolates target application.</li>
        </ul>
        <strong>1.1.0</strong>
        <ul>
            <li>Add configuration.</li>
                <ul>
                    <li>Does it automatically attach when the program starts: Yes , No.</li>
                    <li>Target program execution result: NoPrint , ToString , JSON.</li>
                    <li>Entity class default param: Simple , Current , All.</li>
                </ul>
            <li>Add window tool to configure global request headers.</li>
            <li>Increase the configuration of the current method request header.</li>
        </ul>
        ]]>
    </change-notes>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.java</depends>

    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">

        <!--状态配置-->
        <projectService serviceImplementation="io.github.future0923.debug.power.idea.setting.DebugPowerSettingState"/>

        <!--设置-->
        <projectConfigurable instance="io.github.future0923.debug.power.idea.setting.DebugPowerSettingConfigurable"
                             id="DebugPowerTool.Setting"
                             displayName="DebugPower"
                             nonDefaultProject="true"/>

        <toolWindow id="DebugPower"
                    anchor="right"
                    secondary="false"
                    icon="/icon/project.svg"
                    order="last"
                    canCloseContents="false"
                factoryClass="io.github.future0923.debug.power.idea.tool.DebugPowerToolWindowFactory" />

        <!--通知-->
        <applicationService serviceImplementation="io.github.future0923.debug.power.idea.utils.DebugPowerNotifierUtil"/>
        <notificationGroup id="DebugPower" displayType="BALLOON"/>

        <!--json编辑器代码提示-->
        <completion.contributor language="JSON"
                                implementationClass="io.github.future0923.debug.power.idea.completion.DebugPowerJsonEditorCompletionContributor"/>

        <!--json编辑器代码导航-->
        <lang.directNavigationProvider
                implementation="io.github.future0923.debug.power.idea.navigation.DebugPowerJsonEditorDirectNavigationProvider"/>
    </extensions>

    <actions>
        <group id="DebugPowerTool">
            <separator/>
            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
            <action id="DebugPowerTool.QuickDebug"
                    class="io.github.future0923.debug.power.idea.action.QuickDebugEditorPopupMenuAction"
                    text="Quick Debug"
                    description="Quickly call to the current location for execution">
                <keyboard-shortcut keymap="$default" first-keystroke="shift ctrl M"/>
            </action>
            <action id="DebugPowerTool.ExecuteLast"
                    class="io.github.future0923.debug.power.idea.action.ExecuteLastEditorPopupMenuAction"
                    text="Execute Last"
                    description="Quickly call last for execution">
                <keyboard-shortcut keymap="$default" first-keystroke="shift ctrl L"/>
            </action>
            <separator/>
        </group>
    </actions>

    <applicationListeners>
        <listener class="io.github.future0923.debug.power.idea.listener.idea.DebugPowerExecutionListener"
                  topic="com.intellij.execution.ExecutionListener"/>
    </applicationListeners>
</idea-plugin>